📌 Estrutura da Classe
Propriedades:

m – margin (margem)

p – padding (preenchimento)

Lados:

t – top (superior)

b – bottom (inferior)

s – start (esquerda em LTR)

e – end (direita em LTR)

x – eixo horizontal (start + end)

y – eixo vertical (top + bottom)

sem lado – todos os lados

Tamanhos (-{n}):

0 – 0

1 – 0.25rem

2 – 0.5rem

3 – 1rem

4 – 1.5rem

5 – 3rem

auto – auto

✅ Exemplos Completos
🟡 Margin (m):
Classe	Resultado
m-0	margin: 0
mt-3	margin-top: 1rem
mb-2	margin-bottom: 0.5rem
ms-4	margin-start (left): 1.5rem
me-1	margin-end (right): 0.25rem
mx-2	margem esquerda + direita
my-5	margem superior + inferior

🔵 Padding (p):
Classe	Resultado
p-0	padding: 0
pt-2	padding-top: 0.5rem
pb-3	padding-bottom: 1rem
ps-1	padding-start (left): 0.25rem
pe-4	padding-end (right): 1.5rem
px-5	preenchimento horizontal: 3rem
py-1	preenchimento vertical: 0.25rem

🔄 Direções LTR vs RTL
start e end respeitam a direção do texto:

Em LTR (padrão):
start = left
end = right

Em RTL:
start = right
end = left

// START PROJETO
Como rodar seeders no outro ambiente?
Certifique-se de ter o código atualizado no outro ambiente (git pull ou deploy atualizado).

Rode as migrations, se ainda não tiver rodado:
bash
    php artisan migrate


Rode as seeders:
bash
    php artisan db:seed

starte o server:
bash
    npm run dev


-php artisan make:controller MyController
-php artisan make:migration create_nome_da_tablea_table
-php artisan make:model NomeDoModel


roles e permissoes
    @auth
        <p>Você está autenticado como: <strong>{{ auth()->user()->name }}</strong></p>
        @hasanyrole('admin|moderador|user')
            <p><strong>Any Role</strong></p>
        @endhasanyrole

        @role('admin')
            <p><strong>ADMINISTRADOR</strong></p>
        @endrole

        @role('moderador')
            <p><strong>MODERADOR</strong></p>
        @endrole

        @role('user')
            <p><strong>USUÁRIO</strong></p>
        @endrole
    @endauth

substitui todos os existentes
$associado->syncRoles(['associado', 'user']);

inclui novos sem substituir
$associado->assignRole('associado');
$associado->assignRole('user');



Route::middleware(['auth'])->group(function () {
    Route::resource('posts', PostController::class);
});

The Route::resource will generate routes like:
    GET /posts → PostController@index
    GET /posts/create → PostController@create
    POST /posts → PostController@store
    GET /posts/{post} → PostController@show
    GET /posts/{post}/edit → PostController@edit
    PUT/PATCH /posts/{post} → PostController@update
    DELETE /posts/{post} → PostController@destroy








    Associado index
        -Associado Pastas
            -Associado Arquivos

        


        